<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Groups extends \App\Entity\Groups implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'idGroup', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'points', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'star', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'groupName', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'isFlexible', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'isRegistered', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'registrationName', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'registrationNumber', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'registrationCountry', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'idManager', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'idMainAddress', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'idRegisteredAddress'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'idGroup', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'points', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'star', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'groupName', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'isFlexible', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'isRegistered', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'registrationName', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'registrationNumber', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'registrationCountry', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'idManager', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'idMainAddress', '' . "\0" . 'App\\Entity\\Groups' . "\0" . 'idRegisteredAddress'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Groups $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getIdGroup(): ?int
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getIdGroup();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdGroup', []);

        return parent::getIdGroup();
    }

    /**
     * {@inheritDoc}
     */
    public function getPoints(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPoints', []);

        return parent::getPoints();
    }

    /**
     * {@inheritDoc}
     */
    public function setPoints(?int $points): \App\Entity\Groups
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPoints', [$points]);

        return parent::setPoints($points);
    }

    /**
     * {@inheritDoc}
     */
    public function getStar(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStar', []);

        return parent::getStar();
    }

    /**
     * {@inheritDoc}
     */
    public function setStar(?int $star): \App\Entity\Groups
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStar', [$star]);

        return parent::setStar($star);
    }

    /**
     * {@inheritDoc}
     */
    public function getGroupName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getGroupName', []);

        return parent::getGroupName();
    }

    /**
     * {@inheritDoc}
     */
    public function setGroupName(string $groupName): \App\Entity\Groups
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setGroupName', [$groupName]);

        return parent::setGroupName($groupName);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsFlexible(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsFlexible', []);

        return parent::getIsFlexible();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsFlexible(?bool $isFlexible): \App\Entity\Groups
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsFlexible', [$isFlexible]);

        return parent::setIsFlexible($isFlexible);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsRegistered(): ?bool
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsRegistered', []);

        return parent::getIsRegistered();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsRegistered(bool $isRegistered): \App\Entity\Groups
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsRegistered', [$isRegistered]);

        return parent::setIsRegistered($isRegistered);
    }

    /**
     * {@inheritDoc}
     */
    public function getRegistrationName(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRegistrationName', []);

        return parent::getRegistrationName();
    }

    /**
     * {@inheritDoc}
     */
    public function setRegistrationName(string $registrationName): \App\Entity\Groups
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRegistrationName', [$registrationName]);

        return parent::setRegistrationName($registrationName);
    }

    /**
     * {@inheritDoc}
     */
    public function getRegistrationNumber(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRegistrationNumber', []);

        return parent::getRegistrationNumber();
    }

    /**
     * {@inheritDoc}
     */
    public function setRegistrationNumber(int $registrationNumber): \App\Entity\Groups
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRegistrationNumber', [$registrationNumber]);

        return parent::setRegistrationNumber($registrationNumber);
    }

    /**
     * {@inheritDoc}
     */
    public function getRegistrationCountry(): ?string
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRegistrationCountry', []);

        return parent::getRegistrationCountry();
    }

    /**
     * {@inheritDoc}
     */
    public function setRegistrationCountry(string $registrationCountry): \App\Entity\Groups
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRegistrationCountry', [$registrationCountry]);

        return parent::setRegistrationCountry($registrationCountry);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdManager(): ?\App\Entity\Users
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdManager', []);

        return parent::getIdManager();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdManager(?\App\Entity\Users $idManager): \App\Entity\Groups
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdManager', [$idManager]);

        return parent::setIdManager($idManager);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdMainAddress(): ?\App\Entity\Addresses
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdMainAddress', []);

        return parent::getIdMainAddress();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdMainAddress(?\App\Entity\Addresses $idMainAddress): \App\Entity\Groups
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdMainAddress', [$idMainAddress]);

        return parent::setIdMainAddress($idMainAddress);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdRegisteredAddress(): ?\App\Entity\Addresses
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdRegisteredAddress', []);

        return parent::getIdRegisteredAddress();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdRegisteredAddress(?\App\Entity\Addresses $idRegisteredAddress): \App\Entity\Groups
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdRegisteredAddress', [$idRegisteredAddress]);

        return parent::setIdRegisteredAddress($idRegisteredAddress);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
